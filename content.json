[{"title":"Android开发之活动的生命周期","date":"2017-02-07T01:56:35.000Z","path":"2017/02/07/Android开发之活动的生命周期/","text":"春天不是读书天：关在堂前，闷短寿缘！春天不是读书天：舞雩风前，恍若神仙。春天不是读书天：之乎者焉，太讨人嫌！春天不是读书天：书里流连，非呆即癫。春夏秋冬，我呆我颠。 活动的生命周期 活动生命周期对任何Android开发都很重要，当深入理解过后，能更合理的管理应用资源，会拥有更流畅贯通的用户体验。 1.返回栈 Android中的活动层叠存放在返回栈中。启动一个活动，这个活动入栈，并处于栈顶。销毁一个活动，活动出栈，前一个活动处于栈顶。系统会显示处于栈顶的活动。 2.活动状态 运行状态 当一个活动处于栈顶时，活动就处于运行状态，系统最不愿回收运行状态的活动，会带来很差的用户体验 暂停状态 1.当一个活动不再处于栈顶，但任然可见，这时活动处于暂停状态。2.不是所有的活动都占满整个屏幕的，例如一个活动只占了一半屏幕，你人可以看见后面的的活动，这种活动是完全存活的，系统也不会愿意回收。 停止状态 活动不再处于栈顶，也不可见。这时活动处于停止状态。系统仍会为其保存状态及变量，必要时可能会回收。 销毁状态 活动从返回栈中移除后变成销毁状态，系统会倾向于回收销毁状态的活动，以保证内存充足。 3.活动的生存期 完整生存期 活动在 onCreate() 方法和 onDestroy() 方法之间所经历的，就是完整生存期。一般情况下，一个活动会在 onCreate() 方法中完成各种初始化操作，而在 onDestroy() 方法中完成释放内存的操作。 可见生存期 活动在 onStart() 方法和 onStop() 方法之间所经历的，就是可见生存期。在可见生存期内，活动对于用户总是可见的，即便有可能无法和用户进行交互。我们可以通过这两个方法，合理地管理那些对用户可见的资源。比如在 onStart() 方法中对资源进行加载，而在 onStop() 方法中对资源进行释放，从而保证处于停止状态的活动不会占用过多内存。 前台生存期 活动在 onResume() 方法和 onPause() 方法之间所经历的，就是前台生存期。在前台生存期内，活动总是处于运行状态的，此时的活动是可以和用户进行相互的，我们平时看到和接触最多的也这个状态下的活动。 onRestart() 这个方法在活动由停止状态变为运行状态之前调用，也就是活动被重新启动了。 4.官方图示 实例 首先关闭原有项目，然后新建LifeCycleTest项目。并且允许ADT帮我们自动创建活动，创建的活动名和布局名都使用默认值。还需要分别再创建两个子活动，NormalActivity和DialogActivity。 新建 normal_layout.xml 文件: 123456789&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\" &gt; &lt;TextView android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:text=\"This is a normal activity\"/&gt;&lt;/LinearLayout&gt; 再新建一个 dialog_layout.xml 文件: 123456789&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\" &gt;&lt;TextView android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:text=\"This is a dialog activity\"/&gt;&lt;/LinearLayout&gt; 再分别建立对应的活动NormalActivity和DialogActivity。在 AndroidManifest.xml的 &lt; activity &gt; 中添加代码，将出现的活动设成对话框： 1234567&lt;activity android:name=\".NormalActivity\" &gt;&lt;/activity&gt;&lt;activity android:name=\".DialogActivity\" android:theme=\"@android:style/Theme.Dialog\" &gt;&lt;/activity&gt; 这里分别为两个活动进行注册，但是 DialogActivity 的注册代码有些不同，它使用了一个android:theme属性，这是用于给当前活动指定主题的，这里@android: style/Theme.Dialog 则毫无疑问是 让 DialogActivity 使用对话框式的主题。 现在在activity_main.xml，重新定制我们主活动的布局： 12345678910111213141516&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\" &gt; &lt;Button android:id=\"@+id/start_normal_activity\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:text=\"Start NormalActivity\" /&gt; &lt;Button android:id=\"@+id/start_dialog_activity\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:text=\"Start DialogActivity\" /&gt;&lt;/LinearLayout&gt; 加入了两个按钮，一个用于启动 NormalActivity，一个用于启动 DialogActivity。 最后修改 MainActivity 中的代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051public class MainActivity extends Activity &#123; public static final String TAG = \"MainActivity\";@Overrideprotected void onCreate(Bundle savedInstanceState) &#123;super.onCreate(savedInstanceState); Log.d(TAG, \"onCreate\"); requestWindowFeature(Window.FEATURE_NO_TITLE); setContentView(R.layout.activity_main);Button startNormalActivity = (Button) findViewById(R.id.start_normal_activity);Button startDialogActivity = (Button) findViewById(R.id.start_dialog_activity);startNormalActivity.setOnClickListener(new OnClickListener() &#123;@Overridepublic void onClick(View v) &#123;Intent intent = new Intent(MainActivity.this, NormalActivity.class);startActivity(intent);&#125;&#125;);startDialogActivity.setOnClickListener(new OnClickListener() &#123;@Overridepublic void onClick(View v) &#123;Intent intent = new Intent(MainActivity.this, DialogActivity.class);startActivity(intent);&#125;&#125;);&#125;@Overrideprotected void onStart() &#123;super.onStart(); Log.d(TAG, \"onStart\");&#125;@Overrideprotected void onResume() &#123;super.onResume(); Log.d(TAG, \"onResume\");&#125;@Overrideprotected void onPause() &#123;super.onPause(); Log.d(TAG, \"onPause\");&#125;@Overrideprotected void onStop() &#123;super.onStop(); Log.d(TAG, \"onStop\");&#125;@Overrideprotected void onDestroy() &#123;super.onDestroy(); Log.d(TAG, \"onDestroy\");&#125;@Overrideprotected void onRestart() &#123;super.onRestart(); Log.d(TAG, \"onRestart\");&#125;&#125; 在 onCreate()方法中，我们分别为两个按钮注册了点击事件，点击第一个按钮会启动 NormalActivity，点击第二个按钮会启动 DialogActivity。然后在 Activity 的七个回调方法中 分别打印了一句话，这样就可以通过观察日志的方式来更直观地理解活动的生命周期。可以通过logcat中的打印日志，观察结果，得到规律。","tags":[{"name":"春天","slug":"春天","permalink":"http://yoursite.com/tags/春天/"},{"name":"Android开发","slug":"Android开发","permalink":"http://yoursite.com/tags/Android开发/"},{"name":"活动生命周期","slug":"活动生命周期","permalink":"http://yoursite.com/tags/活动生命周期/"}]},{"title":"一只小白的博客建立心得","date":"2017-02-05T01:57:35.000Z","path":"2017/02/05/个人博客的建立/","text":"引言 我们还在这样的世上活着；我也早觉得有写一点东西的必要了。离大年初一也已有一个多星期，忘却的许多事快要降临了罢，我正有写一点东西的必要了。 建立个人博客的原因有很多。可以页面更自由、更独立啦；交互性较强啦；最重要的是对自己的错误总结以及知识积累啦；好吧，我承认是为了装逼。 自结干货1. 环境搭建 node.js下载及安装 下载安装后，利用cmd检查是否安装成功 git安装 与node.js同理 gitHub账户的配置在github中创建一个名为yourname.github.io的仓库，github会为你自动创建一个你的项目页面，也就是你博客主页 2.hexo安装及配置 安装 在合适的位置新建一个hexo文件夹，命令行输入: npm install hexo-cli -g； 继续输入:npm install hexo --save hexo -v 检查 配置初始化：hexo init组件安装：npm install本地检验：hexo s生成文件：hexo g上传部署: hexo d 3.上传本地配置 Deployment配置 deploy: dype:git repo:git@github.com:yourname/yourname.github.io.git branch:master repo指向的是你的仓库地址，可在你的仓库中直接复制 书写一篇新的博客利用命令hexo new post&quot;your title&quot;新建一篇博客 到hexo\\source_posts下编译你的 article title.md 文件 一般使用markdown编译器来编译 可以先用hexo s命令在http://0.0.0.0:4000/，本地检阅一下效果 满意后，再生成hexo g,部署hexo d,就可以到http://yourname.github.io浏览了 参考资料 这次的经验主要参考于郭神推荐的一篇博客：手把手教你用hexo+github搭建属于自己的博客","tags":[{"name":"小白","slug":"小白","permalink":"http://yoursite.com/tags/小白/"},{"name":"个人博客的搭建","slug":"个人博客的搭建","permalink":"http://yoursite.com/tags/个人博客的搭建/"}]}]